{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { sendMessage, ApiError } from '../utils/api';\n\n// Generate smart follow-up suggestions based on user query and response content\nconst generateFallbackSuggestions = (userQuery, assistantResponse) => {\n  const query = userQuery.toLowerCase();\n  const response = assistantResponse.toLowerCase();\n\n  // Extract potential symbols from the response or query\n  const symbolPattern = /\\b[A-Z]{1,5}\\b/g;\n  const symbols = (userQuery + ' ' + assistantResponse).match(symbolPattern) || [];\n  const uniqueSymbols = Array.from(new Set(symbols)).filter(s => s.length <= 5).slice(0, 3);\n  const primarySymbol = uniqueSymbols[0] || 'AAPL';\n\n  // Define all available tools and their descriptions\n  const availableTools = [{\n    category: 'advisor',\n    tools: [{\n      name: 'buy_recommendation',\n      keywords: ['should i buy', 'should i invest', 'good investment', 'worth buying'],\n      template: symbol => `Should I buy ${symbol || 'AAPL'} stock?`\n    }, {\n      name: 'risk_analysis',\n      keywords: ['risk', 'risky', 'safe', 'volatile'],\n      template: symbol => `What are the risks of investing in ${symbol || 'AAPL'}?`\n    }, {\n      name: 'investment_timing',\n      keywords: ['when to buy', 'good time', 'timing', 'wait'],\n      template: symbol => `Is now a good time to buy ${symbol || 'AAPL'}?`\n    }, {\n      name: 'investment_comparison',\n      keywords: ['better investment', 'which to choose', 'compare for investment'],\n      template: symbol => `Compare ${symbol || 'AAPL'} vs GOOGL for investment`\n    }]\n  }, {\n    category: 'stock',\n    tools: [{\n      name: 'stock_price',\n      keywords: ['price', 'quote', 'current'],\n      template: symbol => `What's ${symbol || 'AAPL'} current stock price?`\n    }, {\n      name: 'compare_stocks',\n      keywords: ['compare', 'vs', 'versus'],\n      template: symbol => `Compare ${symbol || 'AAPL'} vs GOOGL vs MSFT`\n    }, {\n      name: 'price_history',\n      keywords: ['history', 'performance', 'chart', 'trend'],\n      template: symbol => `Show me 6 month price history for ${symbol || 'AAPL'}`\n    }, {\n      name: 'market_movers',\n      keywords: ['gainers', 'losers', 'movers', 'trending'],\n      template: () => 'Top market gainers today'\n    }, {\n      name: 'market_hours',\n      keywords: ['hours', 'schedule', 'open', 'close'],\n      template: () => 'What are market hours today?'\n    }]\n  }, {\n    category: 'equity',\n    tools: [{\n      name: 'company_info',\n      keywords: ['company', 'about', 'overview', 'profile'],\n      template: symbol => `Tell me about ${symbol || 'AAPL'} company`\n    }, {\n      name: 'news',\n      keywords: ['news', 'articles', 'headlines', 'recent'],\n      template: symbol => `Recent news for ${symbol || 'AAPL'}`\n    }, {\n      name: 'analyst_ratings',\n      keywords: ['analyst', 'rating', 'recommendation', 'target'],\n      template: symbol => `Analyst ratings for ${symbol || 'AAPL'}`\n    }, {\n      name: 'insider_trading',\n      keywords: ['insider', 'trading activity', 'transactions'],\n      template: symbol => `Insider trading activity for ${symbol || 'AAPL'}`\n    }]\n  }];\n  const suggestions = [];\n\n  // Check what tools haven't been used based on response content\n  for (const category of availableTools) {\n    for (const tool of category.tools) {\n      const hasBeenUsed = tool.keywords.some(keyword => response.includes(keyword) || response.includes(tool.name.replace('_', ' ')) || category.category === 'stock' && response.includes('stock information') || category.category === 'equity' && response.includes('company insights'));\n      if (!hasBeenUsed) {\n        // Generate suggestion based on available symbols or general query\n        if (tool.name === 'market_movers' || tool.name === 'market_hours') {\n          suggestions.push(tool.template());\n        } else if (uniqueSymbols.length > 0) {\n          suggestions.push(tool.template(primarySymbol));\n        } else if (tool.name === 'stock_price' || tool.name === 'compare_stocks') {\n          // For general queries without symbols, suggest popular stocks\n          suggestions.push(tool.template('AAPL'));\n        }\n      }\n    }\n  }\n\n  // If we have symbols but few suggestions, add cross-category suggestions\n  if (uniqueSymbols.length > 0 && suggestions.length < 3) {\n    const crossSuggestions = [`Compare ${primarySymbol} with other top stocks`, `Full analysis of ${primarySymbol}`, `What analysts think about ${primarySymbol}`, `${primarySymbol} vs competitors`];\n    for (const crossSugg of crossSuggestions) {\n      if (suggestions.length < 4 && !suggestions.some(s => s.toLowerCase().includes(crossSugg.toLowerCase().split(' ')[0]))) {\n        suggestions.push(crossSugg);\n      }\n    }\n  }\n\n  // If still no suggestions, add general market suggestions\n  if (suggestions.length === 0) {\n    suggestions.push('What\\'s AAPL stock price?', 'Compare AAPL vs GOOGL vs MSFT', 'What are market hours today?', 'Top market gainers today');\n  }\n\n  // Add variety for different symbols if we have multiple\n  if (uniqueSymbols.length > 1 && suggestions.length < 4) {\n    for (let i = 1; i < uniqueSymbols.length && suggestions.length < 4; i++) {\n      const altSymbol = uniqueSymbols[i];\n      if (!suggestions.some(s => s.includes(altSymbol))) {\n        suggestions.push(`What's ${altSymbol} stock price?`);\n      }\n    }\n  }\n\n  // Format as numbered list with dynamic emojis\n  const formattedSuggestions = suggestions.slice(0, 4).map((suggestion, index) => {\n    let emoji = '🔍';\n    const suggLower = suggestion.toLowerCase();\n    if (suggLower.includes('price') && !suggLower.includes('history')) emoji = '📈';else if (suggLower.includes('compare') || suggLower.includes('vs')) emoji = '📊';else if (suggLower.includes('history') || suggLower.includes('performance')) emoji = '📉';else if (suggLower.includes('company') || suggLower.includes('about') || suggLower.includes('analysis')) emoji = '🏢';else if (suggLower.includes('news') || suggLower.includes('articles')) emoji = '📰';else if (suggLower.includes('analyst') || suggLower.includes('rating')) emoji = '📊';else if (suggLower.includes('insider') || suggLower.includes('trading')) emoji = '👥';else if (suggLower.includes('gainers') || suggLower.includes('movers') || suggLower.includes('trending')) emoji = '🚀';else if (suggLower.includes('hours') || suggLower.includes('schedule')) emoji = '🕐';\n    return `${index + 1}. ${emoji} ${suggestion}`;\n  });\n  return `\\n\\n__FOLLOW_UPS_START__\\n${formattedSuggestions.join('\\n')}\\n__FOLLOW_UPS_END__`;\n};\nexport function useChat() {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: '1',\n    role: 'assistant',\n    content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\n📈 **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\n📊 **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\n📉 **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\n🚀 **Market Movers** - \\\"Show me top gainers today\\\"\\n🕐 **Trading Hours** - \\\"What are market hours?\\\"\\n🏢 **Company Information** - \\\"Tell me about Apple company\\\"\\n📰 **Company News** - \\\"Recent news for Tesla\\\"\\n👥 **Insider Trading** - \\\"Insider activity for NVDA\\\"\\n📊 **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n    timestamp: new Date()\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const handleSendMessage = useCallback(async content => {\n    if (!content.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: content.trim(),\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setError(undefined);\n    try {\n      const response = await sendMessage(content.trim());\n\n      // Check if response already contains follow-up suggestions\n      let finalResponse = response;\n      if (!response.includes('__FOLLOW_UPS_START__')) {\n        // Generate fallback suggestions if none exist\n        const fallbackSuggestions = generateFallbackSuggestions(content.trim(), response);\n        finalResponse = response + fallbackSuggestions;\n      }\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: finalResponse,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      const errorMessage = err instanceof ApiError ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      const errorResponse = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: `❌ **Error**: ${errorMessage}\\n\\nPlease try again or check if the AI Stock Assistant server is running.`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorResponse]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]);\n  const clearMessages = useCallback(() => {\n    setMessages([{\n      id: '1',\n      role: 'assistant',\n      content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\n📈 **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\n📊 **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\n📉 **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\n🚀 **Market Movers** - \\\"Show me top gainers today\\\"\\n🕐 **Trading Hours** - \\\"What are market hours?\\\"\\n🏢 **Company Information** - \\\"Tell me about Apple company\\\"\\n📰 **Company News** - \\\"Recent news for Tesla\\\"\\n👥 **Insider Trading** - \\\"Insider activity for NVDA\\\"\\n📊 **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n      timestamp: new Date()\n    }]);\n    setError(undefined);\n  }, []);\n  return {\n    messages,\n    isLoading,\n    error,\n    sendMessage: handleSendMessage,\n    clearMessages\n  };\n}\n_s(useChat, \"dj0LItiq/5wE6ZgFAKrCr0jeDKI=\");","map":{"version":3,"names":["useState","useCallback","sendMessage","ApiError","generateFallbackSuggestions","userQuery","assistantResponse","query","toLowerCase","response","symbolPattern","symbols","match","uniqueSymbols","Array","from","Set","filter","s","length","slice","primarySymbol","availableTools","category","tools","name","keywords","template","symbol","suggestions","tool","hasBeenUsed","some","keyword","includes","replace","push","crossSuggestions","crossSugg","split","i","altSymbol","formattedSuggestions","map","suggestion","index","emoji","suggLower","join","useChat","_s","messages","setMessages","id","role","content","timestamp","Date","isLoading","setIsLoading","error","setError","handleSendMessage","trim","userMessage","now","toString","prev","undefined","finalResponse","fallbackSuggestions","assistantMessage","err","errorMessage","message","errorResponse","clearMessages"],"sources":["/Users/advaitdarbare/Desktop/ai-stock-assistant/frontend/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { Message, ChatState } from '../types';\nimport { sendMessage, ApiError } from '../utils/api';\n\n// Generate smart follow-up suggestions based on user query and response content\nconst generateFallbackSuggestions = (userQuery: string, assistantResponse: string): string => {\n  const query = userQuery.toLowerCase();\n  const response = assistantResponse.toLowerCase();\n  \n  // Extract potential symbols from the response or query\n  const symbolPattern = /\\b[A-Z]{1,5}\\b/g;\n  const symbols = (userQuery + ' ' + assistantResponse).match(symbolPattern) || [];\n  const uniqueSymbols = Array.from(new Set(symbols)).filter(s => s.length <= 5).slice(0, 3);\n  const primarySymbol = uniqueSymbols[0] || 'AAPL';\n  \n  // Define all available tools and their descriptions\n  const availableTools = [\n    {\n      category: 'advisor',\n      tools: [\n        { name: 'buy_recommendation', keywords: ['should i buy', 'should i invest', 'good investment', 'worth buying'], template: (symbol?: string) => `Should I buy ${symbol || 'AAPL'} stock?` },\n        { name: 'risk_analysis', keywords: ['risk', 'risky', 'safe', 'volatile'], template: (symbol?: string) => `What are the risks of investing in ${symbol || 'AAPL'}?` },\n        { name: 'investment_timing', keywords: ['when to buy', 'good time', 'timing', 'wait'], template: (symbol?: string) => `Is now a good time to buy ${symbol || 'AAPL'}?` },\n        { name: 'investment_comparison', keywords: ['better investment', 'which to choose', 'compare for investment'], template: (symbol?: string) => `Compare ${symbol || 'AAPL'} vs GOOGL for investment` }\n      ]\n    },\n    {\n      category: 'stock',\n      tools: [\n        { name: 'stock_price', keywords: ['price', 'quote', 'current'], template: (symbol?: string) => `What's ${symbol || 'AAPL'} current stock price?` },\n        { name: 'compare_stocks', keywords: ['compare', 'vs', 'versus'], template: (symbol?: string) => `Compare ${symbol || 'AAPL'} vs GOOGL vs MSFT` },\n        { name: 'price_history', keywords: ['history', 'performance', 'chart', 'trend'], template: (symbol?: string) => `Show me 6 month price history for ${symbol || 'AAPL'}` },\n        { name: 'market_movers', keywords: ['gainers', 'losers', 'movers', 'trending'], template: () => 'Top market gainers today' },\n        { name: 'market_hours', keywords: ['hours', 'schedule', 'open', 'close'], template: () => 'What are market hours today?' }\n      ]\n    },\n    {\n      category: 'equity',\n      tools: [\n        { name: 'company_info', keywords: ['company', 'about', 'overview', 'profile'], template: (symbol?: string) => `Tell me about ${symbol || 'AAPL'} company` },\n        { name: 'news', keywords: ['news', 'articles', 'headlines', 'recent'], template: (symbol?: string) => `Recent news for ${symbol || 'AAPL'}` },\n        { name: 'analyst_ratings', keywords: ['analyst', 'rating', 'recommendation', 'target'], template: (symbol?: string) => `Analyst ratings for ${symbol || 'AAPL'}` },\n        { name: 'insider_trading', keywords: ['insider', 'trading activity', 'transactions'], template: (symbol?: string) => `Insider trading activity for ${symbol || 'AAPL'}` }\n      ]\n    }\n  ];\n  \n  const suggestions: string[] = [];\n  \n  // Check what tools haven't been used based on response content\n  for (const category of availableTools) {\n    for (const tool of category.tools) {\n      const hasBeenUsed = tool.keywords.some(keyword => \n        response.includes(keyword) || \n        response.includes(tool.name.replace('_', ' ')) ||\n        (category.category === 'stock' && response.includes('stock information')) ||\n        (category.category === 'equity' && response.includes('company insights'))\n      );\n      \n      if (!hasBeenUsed) {\n        // Generate suggestion based on available symbols or general query\n        if (tool.name === 'market_movers' || tool.name === 'market_hours') {\n          suggestions.push(tool.template());\n        } else if (uniqueSymbols.length > 0) {\n          suggestions.push(tool.template(primarySymbol));\n        } else if (tool.name === 'stock_price' || tool.name === 'compare_stocks') {\n          // For general queries without symbols, suggest popular stocks\n          suggestions.push(tool.template('AAPL'));\n        }\n      }\n    }\n  }\n  \n  // If we have symbols but few suggestions, add cross-category suggestions\n  if (uniqueSymbols.length > 0 && suggestions.length < 3) {\n    const crossSuggestions = [\n      `Compare ${primarySymbol} with other top stocks`,\n      `Full analysis of ${primarySymbol}`,\n      `What analysts think about ${primarySymbol}`,\n      `${primarySymbol} vs competitors`\n    ];\n    \n    for (const crossSugg of crossSuggestions) {\n      if (suggestions.length < 4 && !suggestions.some(s => s.toLowerCase().includes(crossSugg.toLowerCase().split(' ')[0]))) {\n        suggestions.push(crossSugg);\n      }\n    }\n  }\n  \n  // If still no suggestions, add general market suggestions\n  if (suggestions.length === 0) {\n    suggestions.push(\n      'What\\'s AAPL stock price?',\n      'Compare AAPL vs GOOGL vs MSFT', \n      'What are market hours today?',\n      'Top market gainers today'\n    );\n  }\n  \n  // Add variety for different symbols if we have multiple\n  if (uniqueSymbols.length > 1 && suggestions.length < 4) {\n    for (let i = 1; i < uniqueSymbols.length && suggestions.length < 4; i++) {\n      const altSymbol = uniqueSymbols[i];\n      if (!suggestions.some(s => s.includes(altSymbol))) {\n        suggestions.push(`What's ${altSymbol} stock price?`);\n      }\n    }\n  }\n  \n  // Format as numbered list with dynamic emojis\n  const formattedSuggestions = suggestions.slice(0, 4).map((suggestion, index) => {\n    let emoji = '🔍';\n    const suggLower = suggestion.toLowerCase();\n    \n    if (suggLower.includes('price') && !suggLower.includes('history')) emoji = '📈';\n    else if (suggLower.includes('compare') || suggLower.includes('vs')) emoji = '📊';\n    else if (suggLower.includes('history') || suggLower.includes('performance')) emoji = '📉';\n    else if (suggLower.includes('company') || suggLower.includes('about') || suggLower.includes('analysis')) emoji = '🏢';\n    else if (suggLower.includes('news') || suggLower.includes('articles')) emoji = '📰';\n    else if (suggLower.includes('analyst') || suggLower.includes('rating')) emoji = '📊';\n    else if (suggLower.includes('insider') || suggLower.includes('trading')) emoji = '👥';\n    else if (suggLower.includes('gainers') || suggLower.includes('movers') || suggLower.includes('trending')) emoji = '🚀';\n    else if (suggLower.includes('hours') || suggLower.includes('schedule')) emoji = '🕐';\n    \n    return `${index + 1}. ${emoji} ${suggestion}`;\n  });\n  \n  return `\\n\\n__FOLLOW_UPS_START__\\n${formattedSuggestions.join('\\n')}\\n__FOLLOW_UPS_END__`;\n};\n\nexport function useChat(): ChatState & {\n  sendMessage: (content: string) => Promise<void>;\n  clearMessages: () => void;\n} {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'assistant',\n      content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\n📈 **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\n📊 **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\n📉 **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\n🚀 **Market Movers** - \\\"Show me top gainers today\\\"\\n🕐 **Trading Hours** - \\\"What are market hours?\\\"\\n🏢 **Company Information** - \\\"Tell me about Apple company\\\"\\n📰 **Company News** - \\\"Recent news for Tesla\\\"\\n👥 **Insider Trading** - \\\"Insider activity for NVDA\\\"\\n📊 **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n      timestamp: new Date(),\n    }\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>();\n\n  const handleSendMessage = useCallback(async (content: string) => {\n    if (!content.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: content.trim(),\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setError(undefined);\n\n    try {\n      const response = await sendMessage(content.trim());\n      \n      // Check if response already contains follow-up suggestions\n      let finalResponse = response;\n      if (!response.includes('__FOLLOW_UPS_START__')) {\n        // Generate fallback suggestions if none exist\n        const fallbackSuggestions = generateFallbackSuggestions(content.trim(), response);\n        finalResponse = response + fallbackSuggestions;\n      }\n      \n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: finalResponse,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      const errorMessage = err instanceof ApiError ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      \n      const errorResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: `❌ **Error**: ${errorMessage}\\n\\nPlease try again or check if the AI Stock Assistant server is running.`,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, errorResponse]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]);\n\n  const clearMessages = useCallback(() => {\n    setMessages([\n      {\n        id: '1',\n        role: 'assistant',\n        content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\n📈 **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\n📊 **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\n📉 **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\n🚀 **Market Movers** - \\\"Show me top gainers today\\\"\\n🕐 **Trading Hours** - \\\"What are market hours?\\\"\\n🏢 **Company Information** - \\\"Tell me about Apple company\\\"\\n📰 **Company News** - \\\"Recent news for Tesla\\\"\\n👥 **Insider Trading** - \\\"Insider activity for NVDA\\\"\\n📊 **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n        timestamp: new Date(),\n      }\n    ]);\n    setError(undefined);\n  }, []);\n\n  return {\n    messages,\n    isLoading,\n    error,\n    sendMessage: handleSendMessage,\n    clearMessages,\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}