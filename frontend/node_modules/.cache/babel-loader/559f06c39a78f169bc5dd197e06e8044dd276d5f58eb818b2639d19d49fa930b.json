{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:2024';\nexport class ApiError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n    this.name = 'ApiError';\n  }\n}\nexport async function sendMessage(message) {\n  try {\n    var _response$body;\n    const response = await fetch(`${API_BASE_URL}/runs/stream`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        input: {\n          input: message\n        },\n        config: {\n          configurable: {\n            thread_id: \"thread_1\"\n          }\n        },\n        stream_mode: \"values\"\n      })\n    });\n    if (!response.ok) {\n      throw new ApiError(`HTTP error! status: ${response.status}`, response.status);\n    }\n    const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n    if (!reader) {\n      throw new ApiError('No response stream available');\n    }\n    let result = '';\n    const decoder = new TextDecoder();\n    try {\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ') && line !== 'data: [DONE]') {\n            try {\n              const data = JSON.parse(line.substring(6));\n              if (data.output) {\n                result = data.output;\n              }\n            } catch (e) {\n              // Skip invalid JSON lines\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n    return result || 'No response received';\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n\n    // Network or other errors\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new ApiError('Unable to connect to the AI Stock Assistant. Please make sure the server is running.');\n    }\n    throw new ApiError('An unexpected error occurred while processing your request.');\n  }\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiError","Error","constructor","message","status","name","sendMessage","_response$body","response","fetch","method","headers","body","JSON","stringify","input","config","configurable","thread_id","stream_mode","ok","reader","getReader","result","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","line","startsWith","data","parse","substring","output","e","releaseLock","error","TypeError","includes"],"sources":["/Users/advaitdarbare/Desktop/ai-stock-assistant/frontend/src/utils/api.ts"],"sourcesContent":["import { ApiResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:2024';\n\nexport class ApiError extends Error {\n  constructor(message: string, public status?: number) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nexport async function sendMessage(message: string): Promise<string> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/runs/stream`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        input: {\n          input: message\n        },\n        config: {\n          configurable: {\n            thread_id: \"thread_1\"\n          }\n        },\n        stream_mode: \"values\"\n      }),\n    });\n\n    if (!response.ok) {\n      throw new ApiError(`HTTP error! status: ${response.status}`, response.status);\n    }\n\n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new ApiError('No response stream available');\n    }\n\n    let result = '';\n    const decoder = new TextDecoder();\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        \n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        \n        for (const line of lines) {\n          if (line.startsWith('data: ') && line !== 'data: [DONE]') {\n            try {\n              const data = JSON.parse(line.substring(6));\n              if (data.output) {\n                result = data.output;\n              }\n            } catch (e) {\n              // Skip invalid JSON lines\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n\n    return result || 'No response received';\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n    \n    // Network or other errors\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new ApiError('Unable to connect to the AI Stock Assistant. Please make sure the server is running.');\n    }\n    \n    throw new ApiError('An unexpected error occurred while processing your request.');\n  }\n}"],"mappings":"AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,OAAO,MAAMC,QAAQ,SAASC,KAAK,CAAC;EAClCC,WAAWA,CAACC,OAAe,EAASC,MAAe,EAAE;IACnD,KAAK,CAACD,OAAO,CAAC;IAAC,KADmBC,MAAe,GAAfA,MAAe;IAEjD,IAAI,CAACC,IAAI,GAAG,UAAU;EACxB;AACF;AAEA,OAAO,eAAeC,WAAWA,CAACH,OAAe,EAAmB;EAClE,IAAI;IAAA,IAAAI,cAAA;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGb,YAAY,cAAc,EAAE;MAC1Dc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE;UACLA,KAAK,EAAEZ;QACT,CAAC;QACDa,MAAM,EAAE;UACNC,YAAY,EAAE;YACZC,SAAS,EAAE;UACb;QACF,CAAC;QACDC,WAAW,EAAE;MACf,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIpB,QAAQ,CAAC,uBAAuBQ,QAAQ,CAACJ,MAAM,EAAE,EAAEI,QAAQ,CAACJ,MAAM,CAAC;IAC/E;IAEA,MAAMiB,MAAM,IAAAd,cAAA,GAAGC,QAAQ,CAACI,IAAI,cAAAL,cAAA,uBAAbA,cAAA,CAAee,SAAS,CAAC,CAAC;IACzC,IAAI,CAACD,MAAM,EAAE;MACX,MAAM,IAAIrB,QAAQ,CAAC,8BAA8B,CAAC;IACpD;IAEA,IAAIuB,MAAM,GAAG,EAAE;IACf,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IAEjC,IAAI;MACF,OAAO,IAAI,EAAE;QACX,MAAM;UAAEC,IAAI;UAAEC;QAAM,CAAC,GAAG,MAAMN,MAAM,CAACO,IAAI,CAAC,CAAC;QAC3C,IAAIF,IAAI,EAAE;QAEV,MAAMG,KAAK,GAAGL,OAAO,CAACM,MAAM,CAACH,KAAK,CAAC;QACnC,MAAMI,KAAK,GAAGF,KAAK,CAACG,KAAK,CAAC,IAAI,CAAC;QAE/B,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;UACxB,IAAIE,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,IAAID,IAAI,KAAK,cAAc,EAAE;YACxD,IAAI;cACF,MAAME,IAAI,GAAGtB,IAAI,CAACuB,KAAK,CAACH,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;cAC1C,IAAIF,IAAI,CAACG,MAAM,EAAE;gBACff,MAAM,GAAGY,IAAI,CAACG,MAAM;cACtB;YACF,CAAC,CAAC,OAAOC,CAAC,EAAE;cACV;YAAA;UAEJ;QACF;MACF;IACF,CAAC,SAAS;MACRlB,MAAM,CAACmB,WAAW,CAAC,CAAC;IACtB;IAEA,OAAOjB,MAAM,IAAI,sBAAsB;EACzC,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYzC,QAAQ,EAAE;MAC7B,MAAMyC,KAAK;IACb;;IAEA;IACA,IAAIA,KAAK,YAAYC,SAAS,IAAID,KAAK,CAACtC,OAAO,CAACwC,QAAQ,CAAC,OAAO,CAAC,EAAE;MACjE,MAAM,IAAI3C,QAAQ,CAAC,sFAAsF,CAAC;IAC5G;IAEA,MAAM,IAAIA,QAAQ,CAAC,6DAA6D,CAAC;EACnF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}