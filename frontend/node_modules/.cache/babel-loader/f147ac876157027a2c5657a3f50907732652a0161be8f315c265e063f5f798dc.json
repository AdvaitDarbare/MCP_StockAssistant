{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { sendMessage, ApiError } from '../utils/api';\n\n// Generate smart follow-up suggestions based on user query and response content\nconst generateFallbackSuggestions = (userQuery, assistantResponse) => {\n  const query = userQuery.toLowerCase();\n  const response = assistantResponse.toLowerCase();\n\n  // Extract potential symbols from the response or query\n  const symbolPattern = /\\b[A-Z]{1,5}\\b/g;\n  const symbols = (userQuery + ' ' + assistantResponse).match(symbolPattern) || [];\n  const uniqueSymbols = [...new Set(symbols)].filter(s => s.length <= 5).slice(0, 3);\n  const primarySymbol = uniqueSymbols[0] || 'AAPL';\n  const suggestions = [];\n\n  // Stock-related suggestions\n  if (!response.includes('stock information') && !response.includes('stock price')) {\n    suggestions.push(`What's ${primarySymbol} current stock price?`);\n  }\n  if (!response.includes('comparison') && !response.includes('compare') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Compare ${primarySymbol} vs GOOGL vs MSFT`);\n  }\n  if (!response.includes('history') && !response.includes('performance') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Show me 6 month price history for ${primarySymbol}`);\n  }\n\n  // Company insights suggestions\n  if (!response.includes('company insights') && !response.includes('company overview') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Tell me about ${primarySymbol} company`);\n  }\n  if (!response.includes('news') && !response.includes('articles') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Recent news for ${primarySymbol}`);\n  }\n  if (!response.includes('analyst') && !response.includes('rating') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Analyst ratings for ${primarySymbol}`);\n  }\n  if (!response.includes('insider') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Insider trading activity for ${primarySymbol}`);\n  }\n\n  // Market-wide suggestions\n  if (!response.includes('market movers') && !response.includes('gainers')) {\n    suggestions.push('Top market gainers today');\n  }\n  if (!response.includes('market hours') && !response.includes('trading hours')) {\n    suggestions.push('What are market hours today?');\n  }\n\n  // If no specific suggestions, add general ones\n  if (suggestions.length === 0) {\n    suggestions.push('What\\'s AAPL stock price?');\n    suggestions.push('Compare AAPL vs GOOGL vs MSFT');\n    suggestions.push('What are market hours today?');\n    suggestions.push('Top market gainers today');\n  }\n\n  // Format as numbered list with emojis\n  const formattedSuggestions = suggestions.slice(0, 4).map((suggestion, index) => {\n    let emoji = '🔍';\n    if (suggestion.includes('price')) emoji = '📈';else if (suggestion.includes('compare')) emoji = '📊';else if (suggestion.includes('history')) emoji = '📉';else if (suggestion.includes('company') || suggestion.includes('about')) emoji = '🏢';else if (suggestion.includes('news')) emoji = '📰';else if (suggestion.includes('analyst')) emoji = '📊';else if (suggestion.includes('insider')) emoji = '👥';else if (suggestion.includes('gainers') || suggestion.includes('movers')) emoji = '🚀';else if (suggestion.includes('hours')) emoji = '🕐';\n    return `${index + 1}. ${emoji} ${suggestion}`;\n  });\n  return `\\n\\n__FOLLOW_UPS_START__\\n${formattedSuggestions.join('\\n')}\\n__FOLLOW_UPS_END__`;\n};\nexport function useChat() {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: '1',\n    role: 'assistant',\n    content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\n📈 **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\n📊 **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\n📉 **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\n🚀 **Market Movers** - \\\"Show me top gainers today\\\"\\n🕐 **Trading Hours** - \\\"What are market hours?\\\"\\n🏢 **Company Information** - \\\"Tell me about Apple company\\\"\\n📰 **Company News** - \\\"Recent news for Tesla\\\"\\n👥 **Insider Trading** - \\\"Insider activity for NVDA\\\"\\n📊 **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n    timestamp: new Date()\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const handleSendMessage = useCallback(async content => {\n    if (!content.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: content.trim(),\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setError(undefined);\n    try {\n      const response = await sendMessage(content.trim());\n\n      // Check if response already contains follow-up suggestions\n      let finalResponse = response;\n      if (!response.includes('__FOLLOW_UPS_START__')) {\n        // Generate fallback suggestions if none exist\n        const fallbackSuggestions = generateFallbackSuggestions(content.trim(), response);\n        finalResponse = response + fallbackSuggestions;\n      }\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: finalResponse,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      const errorMessage = err instanceof ApiError ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      const errorResponse = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: `❌ **Error**: ${errorMessage}\\n\\nPlease try again or check if the AI Stock Assistant server is running.`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorResponse]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]);\n  const clearMessages = useCallback(() => {\n    setMessages([{\n      id: '1',\n      role: 'assistant',\n      content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\n📈 **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\n📊 **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\n📉 **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\n🚀 **Market Movers** - \\\"Show me top gainers today\\\"\\n🕐 **Trading Hours** - \\\"What are market hours?\\\"\\n🏢 **Company Information** - \\\"Tell me about Apple company\\\"\\n📰 **Company News** - \\\"Recent news for Tesla\\\"\\n👥 **Insider Trading** - \\\"Insider activity for NVDA\\\"\\n📊 **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n      timestamp: new Date()\n    }]);\n    setError(undefined);\n  }, []);\n  return {\n    messages,\n    isLoading,\n    error,\n    sendMessage: handleSendMessage,\n    clearMessages\n  };\n}\n_s(useChat, \"dj0LItiq/5wE6ZgFAKrCr0jeDKI=\");","map":{"version":3,"names":["useState","useCallback","sendMessage","ApiError","generateFallbackSuggestions","userQuery","assistantResponse","query","toLowerCase","response","symbolPattern","symbols","match","uniqueSymbols","Set","filter","s","length","slice","primarySymbol","suggestions","includes","push","formattedSuggestions","map","suggestion","index","emoji","join","useChat","_s","messages","setMessages","id","role","content","timestamp","Date","isLoading","setIsLoading","error","setError","handleSendMessage","trim","userMessage","now","toString","prev","undefined","finalResponse","fallbackSuggestions","assistantMessage","err","errorMessage","message","errorResponse","clearMessages"],"sources":["/Users/advaitdarbare/Desktop/ai-stock-assistant/frontend/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { Message, ChatState } from '../types';\nimport { sendMessage, ApiError } from '../utils/api';\n\n// Generate smart follow-up suggestions based on user query and response content\nconst generateFallbackSuggestions = (userQuery: string, assistantResponse: string): string => {\n  const query = userQuery.toLowerCase();\n  const response = assistantResponse.toLowerCase();\n  \n  // Extract potential symbols from the response or query\n  const symbolPattern = /\\b[A-Z]{1,5}\\b/g;\n  const symbols = (userQuery + ' ' + assistantResponse).match(symbolPattern) || [];\n  const uniqueSymbols = [...new Set(symbols)].filter(s => s.length <= 5).slice(0, 3);\n  const primarySymbol = uniqueSymbols[0] || 'AAPL';\n  \n  const suggestions: string[] = [];\n  \n  // Stock-related suggestions\n  if (!response.includes('stock information') && !response.includes('stock price')) {\n    suggestions.push(`What's ${primarySymbol} current stock price?`);\n  }\n  \n  if (!response.includes('comparison') && !response.includes('compare') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Compare ${primarySymbol} vs GOOGL vs MSFT`);\n  }\n  \n  if (!response.includes('history') && !response.includes('performance') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Show me 6 month price history for ${primarySymbol}`);\n  }\n  \n  // Company insights suggestions\n  if (!response.includes('company insights') && !response.includes('company overview') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Tell me about ${primarySymbol} company`);\n  }\n  \n  if (!response.includes('news') && !response.includes('articles') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Recent news for ${primarySymbol}`);\n  }\n  \n  if (!response.includes('analyst') && !response.includes('rating') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Analyst ratings for ${primarySymbol}`);\n  }\n  \n  if (!response.includes('insider') && uniqueSymbols.length >= 1) {\n    suggestions.push(`Insider trading activity for ${primarySymbol}`);\n  }\n  \n  // Market-wide suggestions\n  if (!response.includes('market movers') && !response.includes('gainers')) {\n    suggestions.push('Top market gainers today');\n  }\n  \n  if (!response.includes('market hours') && !response.includes('trading hours')) {\n    suggestions.push('What are market hours today?');\n  }\n  \n  // If no specific suggestions, add general ones\n  if (suggestions.length === 0) {\n    suggestions.push('What\\'s AAPL stock price?');\n    suggestions.push('Compare AAPL vs GOOGL vs MSFT');\n    suggestions.push('What are market hours today?');\n    suggestions.push('Top market gainers today');\n  }\n  \n  // Format as numbered list with emojis\n  const formattedSuggestions = suggestions.slice(0, 4).map((suggestion, index) => {\n    let emoji = '🔍';\n    if (suggestion.includes('price')) emoji = '📈';\n    else if (suggestion.includes('compare')) emoji = '📊';\n    else if (suggestion.includes('history')) emoji = '📉';\n    else if (suggestion.includes('company') || suggestion.includes('about')) emoji = '🏢';\n    else if (suggestion.includes('news')) emoji = '📰';\n    else if (suggestion.includes('analyst')) emoji = '📊';\n    else if (suggestion.includes('insider')) emoji = '👥';\n    else if (suggestion.includes('gainers') || suggestion.includes('movers')) emoji = '🚀';\n    else if (suggestion.includes('hours')) emoji = '🕐';\n    \n    return `${index + 1}. ${emoji} ${suggestion}`;\n  });\n  \n  return `\\n\\n__FOLLOW_UPS_START__\\n${formattedSuggestions.join('\\n')}\\n__FOLLOW_UPS_END__`;\n};\n\nexport function useChat(): ChatState & {\n  sendMessage: (content: string) => Promise<void>;\n  clearMessages: () => void;\n} {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'assistant',\n      content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\n📈 **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\n📊 **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\n📉 **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\n🚀 **Market Movers** - \\\"Show me top gainers today\\\"\\n🕐 **Trading Hours** - \\\"What are market hours?\\\"\\n🏢 **Company Information** - \\\"Tell me about Apple company\\\"\\n📰 **Company News** - \\\"Recent news for Tesla\\\"\\n👥 **Insider Trading** - \\\"Insider activity for NVDA\\\"\\n📊 **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n      timestamp: new Date(),\n    }\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>();\n\n  const handleSendMessage = useCallback(async (content: string) => {\n    if (!content.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: content.trim(),\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setError(undefined);\n\n    try {\n      const response = await sendMessage(content.trim());\n      \n      // Check if response already contains follow-up suggestions\n      let finalResponse = response;\n      if (!response.includes('__FOLLOW_UPS_START__')) {\n        // Generate fallback suggestions if none exist\n        const fallbackSuggestions = generateFallbackSuggestions(content.trim(), response);\n        finalResponse = response + fallbackSuggestions;\n      }\n      \n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: finalResponse,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      const errorMessage = err instanceof ApiError ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      \n      const errorResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: `❌ **Error**: ${errorMessage}\\n\\nPlease try again or check if the AI Stock Assistant server is running.`,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, errorResponse]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]);\n\n  const clearMessages = useCallback(() => {\n    setMessages([\n      {\n        id: '1',\n        role: 'assistant',\n        content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\n📈 **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\n📊 **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\n📉 **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\n🚀 **Market Movers** - \\\"Show me top gainers today\\\"\\n🕐 **Trading Hours** - \\\"What are market hours?\\\"\\n🏢 **Company Information** - \\\"Tell me about Apple company\\\"\\n📰 **Company News** - \\\"Recent news for Tesla\\\"\\n👥 **Insider Trading** - \\\"Insider activity for NVDA\\\"\\n📊 **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n        timestamp: new Date(),\n      }\n    ]);\n    setError(undefined);\n  }, []);\n\n  return {\n    messages,\n    isLoading,\n    error,\n    sendMessage: handleSendMessage,\n    clearMessages,\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}