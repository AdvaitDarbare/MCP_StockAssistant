{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { sendMessage, ApiError } from '../utils/api';\nexport function useChat() {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: '1',\n    role: 'assistant',\n    content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\nüìà **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\nüìä **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\nüìâ **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\nüöÄ **Market Movers** - \\\"Show me top gainers today\\\"\\nüïê **Trading Hours** - \\\"What are market hours?\\\"\\nüè¢ **Company Information** - \\\"Tell me about Apple company\\\"\\nüì∞ **Company News** - \\\"Recent news for Tesla\\\"\\nüë• **Insider Trading** - \\\"Insider activity for NVDA\\\"\\nüìä **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n    timestamp: new Date()\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const handleSendMessage = useCallback(async content => {\n    if (!content.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: content.trim(),\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setError(undefined);\n    try {\n      const response = await sendMessage(content.trim());\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: response,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      const errorMessage = err instanceof ApiError ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      const errorResponse = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: `‚ùå **Error**: ${errorMessage}\\n\\nPlease try again or check if the AI Stock Assistant server is running.`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorResponse]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]);\n  const clearMessages = useCallback(() => {\n    setMessages([{\n      id: '1',\n      role: 'assistant',\n      content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\nüìà **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\nüìä **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\nüìâ **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\nüöÄ **Market Movers** - \\\"Show me top gainers today\\\"\\nüïê **Trading Hours** - \\\"What are market hours?\\\"\\nüè¢ **Company Information** - \\\"Tell me about Apple company\\\"\\nüì∞ **Company News** - \\\"Recent news for Tesla\\\"\\nüë• **Insider Trading** - \\\"Insider activity for NVDA\\\"\\nüìä **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n      timestamp: new Date()\n    }]);\n    setError(undefined);\n  }, []);\n  return {\n    messages,\n    isLoading,\n    error,\n    sendMessage: handleSendMessage,\n    clearMessages\n  };\n}\n_s(useChat, \"dj0LItiq/5wE6ZgFAKrCr0jeDKI=\");","map":{"version":3,"names":["useState","useCallback","sendMessage","ApiError","useChat","_s","messages","setMessages","id","role","content","timestamp","Date","isLoading","setIsLoading","error","setError","handleSendMessage","trim","userMessage","now","toString","prev","undefined","response","assistantMessage","err","errorMessage","message","errorResponse","clearMessages"],"sources":["/Users/advaitdarbare/Desktop/ai-stock-assistant/frontend/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { Message, ChatState } from '../types';\nimport { sendMessage, ApiError } from '../utils/api';\n\nexport function useChat(): ChatState & {\n  sendMessage: (content: string) => Promise<void>;\n  clearMessages: () => void;\n} {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'assistant',\n      content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\nüìà **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\nüìä **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\nüìâ **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\nüöÄ **Market Movers** - \\\"Show me top gainers today\\\"\\nüïê **Trading Hours** - \\\"What are market hours?\\\"\\nüè¢ **Company Information** - \\\"Tell me about Apple company\\\"\\nüì∞ **Company News** - \\\"Recent news for Tesla\\\"\\nüë• **Insider Trading** - \\\"Insider activity for NVDA\\\"\\nüìä **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n      timestamp: new Date(),\n    }\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string>();\n\n  const handleSendMessage = useCallback(async (content: string) => {\n    if (!content.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: content.trim(),\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setError(undefined);\n\n    try {\n      const response = await sendMessage(content.trim());\n      \n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: response,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      const errorMessage = err instanceof ApiError ? err.message : 'An unexpected error occurred';\n      setError(errorMessage);\n      \n      const errorResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: `‚ùå **Error**: ${errorMessage}\\n\\nPlease try again or check if the AI Stock Assistant server is running.`,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, errorResponse]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]);\n\n  const clearMessages = useCallback(() => {\n    setMessages([\n      {\n        id: '1',\n        role: 'assistant',\n        content: \"Hello! I'm your AI Stock Assistant. I can help you with:\\n\\nüìà **Stock Prices & Quotes** - \\\"What's AAPL stock price?\\\"\\nüìä **Stock Comparisons** - \\\"Compare AAPL vs TSLA\\\"\\nüìâ **Historical Performance** - \\\"NVDA performance last 6 months\\\"\\nüöÄ **Market Movers** - \\\"Show me top gainers today\\\"\\nüïê **Trading Hours** - \\\"What are market hours?\\\"\\nüè¢ **Company Information** - \\\"Tell me about Apple company\\\"\\nüì∞ **Company News** - \\\"Recent news for Tesla\\\"\\nüë• **Insider Trading** - \\\"Insider activity for NVDA\\\"\\nüìä **Analyst Ratings** - \\\"Analyst ratings for AMD\\\"\\n\\nWhat would you like to know about the markets?\",\n        timestamp: new Date(),\n      }\n    ]);\n    setError(undefined);\n  }, []);\n\n  return {\n    messages,\n    isLoading,\n    error,\n    sendMessage: handleSendMessage,\n    clearMessages,\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}