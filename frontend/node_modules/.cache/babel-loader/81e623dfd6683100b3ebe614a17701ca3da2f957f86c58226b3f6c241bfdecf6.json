{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:2024';\nexport class ApiError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n    this.name = 'ApiError';\n  }\n}\nexport async function sendMessage(message) {\n  try {\n    const response = await fetch(`${API_BASE_URL}/runs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: message\n      })\n    });\n    if (!response.ok) {\n      throw new ApiError(`HTTP error! status: ${response.status}`, response.status);\n    }\n    const data = await response.json();\n    if (data.error) {\n      throw new ApiError(data.error);\n    }\n    return data.response || 'No response received';\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n\n    // Network or other errors\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new ApiError('Unable to connect to the AI Stock Assistant. Please make sure the server is running.');\n    }\n    throw new ApiError('An unexpected error occurred while processing your request.');\n  }\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiError","Error","constructor","message","status","name","sendMessage","response","fetch","method","headers","body","JSON","stringify","query","ok","data","json","error","TypeError","includes"],"sources":["/Users/advaitdarbare/Desktop/ai-stock-assistant/frontend/src/utils/api.ts"],"sourcesContent":["import { ApiResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:2024';\n\nexport class ApiError extends Error {\n  constructor(message: string, public status?: number) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nexport async function sendMessage(message: string): Promise<string> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/runs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: message\n      }),\n    });\n\n    if (!response.ok) {\n      throw new ApiError(`HTTP error! status: ${response.status}`, response.status);\n    }\n\n    const data: ApiResponse = await response.json();\n    \n    if (data.error) {\n      throw new ApiError(data.error);\n    }\n\n    return data.response || 'No response received';\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n    \n    // Network or other errors\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new ApiError('Unable to connect to the AI Stock Assistant. Please make sure the server is running.');\n    }\n    \n    throw new ApiError('An unexpected error occurred while processing your request.');\n  }\n}"],"mappings":"AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,OAAO,MAAMC,QAAQ,SAASC,KAAK,CAAC;EAClCC,WAAWA,CAACC,OAAe,EAASC,MAAe,EAAE;IACnD,KAAK,CAACD,OAAO,CAAC;IAAC,KADmBC,MAAe,GAAfA,MAAe;IAEjD,IAAI,CAACC,IAAI,GAAG,UAAU;EACxB;AACF;AAEA,OAAO,eAAeC,WAAWA,CAACH,OAAe,EAAmB;EAClE,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGZ,YAAY,OAAO,EAAE;MACnDa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAEX;MACT,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIf,QAAQ,CAAC,uBAAuBO,QAAQ,CAACH,MAAM,EAAE,EAAEG,QAAQ,CAACH,MAAM,CAAC;IAC/E;IAEA,MAAMY,IAAiB,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAE/C,IAAID,IAAI,CAACE,KAAK,EAAE;MACd,MAAM,IAAIlB,QAAQ,CAACgB,IAAI,CAACE,KAAK,CAAC;IAChC;IAEA,OAAOF,IAAI,CAACT,QAAQ,IAAI,sBAAsB;EAChD,CAAC,CAAC,OAAOW,KAAK,EAAE;IACd,IAAIA,KAAK,YAAYlB,QAAQ,EAAE;MAC7B,MAAMkB,KAAK;IACb;;IAEA;IACA,IAAIA,KAAK,YAAYC,SAAS,IAAID,KAAK,CAACf,OAAO,CAACiB,QAAQ,CAAC,OAAO,CAAC,EAAE;MACjE,MAAM,IAAIpB,QAAQ,CAAC,sFAAsF,CAAC;IAC5G;IAEA,MAAM,IAAIA,QAAQ,CAAC,6DAA6D,CAAC;EACnF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}